{"version":3,"sources":["../src/functionRegistry.js"],"names":["functionRegistry","dictionary","register","key","func","get","remove","invoke","functionName","data","options","mockKey","window","IS_MOCK","IS_SERVICE_MOCK","registry","apply","Array","prototype","slice","call","arguments","module","exports"],"mappings":";;AACA,SAASA,gBAAT,GAA4B;AACxB,QAAIC,aAAa,EAAjB;;AAEA;;AAEA,aAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AACzBH,mBAAWE,GAAX,IAAkBC,IAAlB;AACH;;AAED,aAASC,GAAT,CAAaF,GAAb,EAAkB;AACd,YAAIC,OAAOH,WAAWE,GAAX,CAAX;AACA,YAAIC,IAAJ,EAAU;AACN,mBAAOA,IAAP;AACH;AACJ;AACD,aAASE,MAAT,CAAgBH,GAAhB,EAAqB;AACjB,YAAIF,WAAWE,GAAX,CAAJ,EAAqB;AACjB,mBAAOF,WAAWE,GAAX,CAAP;AACH;AACJ;;AAED,WAAO;AACHD,kBAAUA,QADP;AAEHG,aAAKA,GAFF;AAGHC,gBAAQA,MAHL;AAIHL,oBAAYA;AAJT,KAAP;AAMH;;AAED,SAASM,MAAT,CAAgBC,YAAhB,EAA8BC,IAA9B,EAAoCC,OAApC,EAA6C;AACzC;AACA;AACA;AACA,QAAIC,UAAUC,OAAOC,OAAP,IAAkBD,OAAOE,eAAP,KAA2B,KAA7C,GAAqD,OAArD,GAA8D,EAA5E;AAAA,QACIV,IADJ;;AAGA,QAAGI,YAAH,EAAgB;AACZJ,eAAOW,SAASV,GAAT,CAAaM,UAAUH,YAAvB,CAAP;AACA,YAAIJ,IAAJ,EAAS;AACL,mBAAOA,KAAKY,KAAL,CAAW,IAAX,EAAiBC,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAjB,CAAP;AACH;AACJ;AACD,WAAOZ,IAAP;AACH;;AAED;AACA,IAAIM,WAAWf,kBAAf;;AAEAsB,OAAOC,OAAP,GAAiB;AACbrB,cAAUa,SAASb,QADN;AAEbG,SAAKU,SAASV,GAFD;AAGbC,YAAQS,SAAST,MAHJ;AAIbL,gBAAYc,SAASd,UAJR;AAKbM,YAAQA;AALK,CAAjB","file":"functionRegistry.js","sourcesContent":["\nfunction functionRegistry() {\n    var dictionary = {};\n\n    // will set the value on an existing observable\n\n    function register(key, func) {\n        dictionary[key] = func;\n    }\n\n    function get(key) {\n        var func = dictionary[key];\n        if (func) {\n            return func;\n        }\n    }\n    function remove(key) {\n        if (dictionary[key]) {\n            delete dictionary[key];\n        }\n    }\n\n    return {\n        register: register,\n        get: get,\n        remove: remove,\n        dictionary: dictionary\n    };\n}\n\nfunction invoke(functionName, data, options) {\n    // IS_MOCK needs to be true in prototype and undefined or false in taskflow to make it Mock\n    // if IS_SERVICE_MOCK is false, then dont use mock keyword\n    // set IS_SERVICE_MOCK to false explicitly when testing, leave it undefined for IS_MOCK to work as desired in protoype and portal\n    var mockKey = window.IS_MOCK && window.IS_SERVICE_MOCK !== false ? 'mock.': '',\n        func;\n\n    if(functionName){\n        func = registry.get(mockKey + functionName);\n        if (func){\n            return func.apply(null, Array.prototype.slice.call(arguments, 1));\n        }\n    }\n    return data;\n}\n\n// create instance\nlet registry = functionRegistry();\n\nmodule.exports = {\n    register: registry.register,\n    get: registry.get,\n    remove: registry.remove,\n    dictionary: registry.dictionary,\n    invoke: invoke\n};\n"]}