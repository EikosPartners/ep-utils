{"version":3,"sources":["../src/functionRegistry.js"],"names":[],"mappings":";;AACA,SAAS,gBAAT,GAA4B;AACxB,QAAI,aAAa,EAAjB;;;;AAIA,aAAS,QAAT,CAAkB,GAAlB,EAAuB,IAAvB,EAA6B;AACzB,mBAAW,GAAX,IAAkB,IAAlB;AACH;;AAED,aAAS,GAAT,CAAa,GAAb,EAAkB;AACd,YAAI,OAAO,WAAW,GAAX,CAAX;AACA,YAAI,IAAJ,EAAU;AACN,mBAAO,IAAP;AACH;AACJ;AACD,aAAS,MAAT,CAAgB,GAAhB,EAAqB;AACjB,YAAI,WAAW,GAAX,CAAJ,EAAqB;AACjB,mBAAO,WAAW,GAAX,CAAP;AACH;AACJ;;AAED,WAAO;AACH,kBAAU,QADP;AAEH,aAAK,GAFF;AAGH,gBAAQ,MAHL;AAIH,oBAAY;AAJT,KAAP;AAMH;;AAED,SAAS,MAAT,CAAgB,YAAhB,EAA8B,IAA9B,EAAoC,OAApC,EAA6C;;;;AAIzC,QAAI,UAAU,OAAO,OAAP,IAAkB,OAAO,eAAP,KAA2B,KAA7C,GAAqD,OAArD,GAA8D,EAA5E;AAAA,QACI,IADJ;;AAGA,QAAG,YAAH,EAAgB;AACZ,eAAO,SAAS,GAAT,CAAa,UAAU,YAAvB,CAAP;AACA,YAAI,IAAJ,EAAS;AACL,mBAAO,KAAK,KAAL,CAAW,IAAX,EAAiB,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,EAAsC,CAAtC,CAAjB,CAAP;AACH;AACJ;AACD,WAAO,IAAP;AACH;;;AAGD,IAAI,WAAW,kBAAf;;AAEA,OAAO,OAAP,GAAiB;AACb,cAAU,SAAS,QADN;AAEb,SAAK,SAAS,GAFD;AAGb,YAAQ,SAAS,MAHJ;AAIb,gBAAY,SAAS,UAJR;AAKb,YAAQ;AALK,CAAjB","file":"functionRegistry.js","sourcesContent":["\nfunction functionRegistry() {\n    var dictionary = {};\n\n    // will set the value on an existing observable\n\n    function register(key, func) {\n        dictionary[key] = func;\n    }\n\n    function get(key) {\n        var func = dictionary[key];\n        if (func) {\n            return func;\n        }\n    }\n    function remove(key) {\n        if (dictionary[key]) {\n            delete dictionary[key];\n        }\n    }\n\n    return {\n        register: register,\n        get: get,\n        remove: remove,\n        dictionary: dictionary\n    };\n}\n\nfunction invoke(functionName, data, options) {\n    // IS_MOCK needs to be true in prototype and undefined or false in taskflow to make it Mock\n    // if IS_SERVICE_MOCK is false, then dont use mock keyword\n    // set IS_SERVICE_MOCK to false explicitly when testing, leave it undefined for IS_MOCK to work as desired in protoype and portal\n    var mockKey = window.IS_MOCK && window.IS_SERVICE_MOCK !== false ? 'mock.': '',\n        func;\n\n    if(functionName){\n        func = registry.get(mockKey + functionName);\n        if (func){\n            return func.apply(null, Array.prototype.slice.call(arguments, 1));\n        }\n    }\n    return data;\n}\n\n// create instance\nlet registry = functionRegistry();\n\nmodule.exports = {\n    register: registry.register,\n    get: registry.get,\n    remove: registry.remove,\n    dictionary: registry.dictionary,\n    invoke: invoke\n};\n"]}