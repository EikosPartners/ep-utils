{"version":3,"sources":["../src/fsWrapper.js"],"names":["fs","require","module","exports","jsonToFileSync","fileName","json","strJson","JSON","stringify","writeFileSync","fileToJsonSync","parse","readFileSync","err","console","error","jsonToFile","filename","callback","undefined","string","writeFile","data","Error","fileToJson","readFile","parsed","err2","log"],"mappings":";;AAAC,IAAIA,KAAKC,QAAQ,IAAR,CAAT;;AAEDC,OAAOC,OAAP,GAAiB;AACbC,oBAAgB,wBAAUC,QAAV,EAAoBC,IAApB,EAA0B;AACtC,YAAIC,UAAUC,KAAKC,SAAL,CAAeH,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAd;AACAN,WAAGU,aAAH,CAAiBL,QAAjB,EAA2BE,OAA3B;AACH,KAJY;AAKbI,oBAAgB,wBAAUN,QAAV,EAAoB;AAChC,YAAI;AACA,mBAAOG,KAAKI,KAAL,CAAWZ,GAAGa,YAAH,CAAgBR,QAAhB,CAAX,CAAP;AACH,SAFD,CAEE,OAAOS,GAAP,EAAY;AACVC,oBAAQC,KAAR,CAAc,8BAA8BX,QAA5C,EAAsDS,GAAtD;AACA,mBAAO,EAAP;AACH;AACJ,KAZY;AAabG,gBAAY,oBAAUC,QAAV,EAAoBZ,IAApB,EAA0Ba,QAA1B,EAAoC;AAC5C,YAAI;AACA,gBAAGb,SAASc,SAAZ,EAAuB;AACnB,oBAAIC,SAASb,KAAKC,SAAL,CAAeH,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAb;AACAN,mBAAGsB,SAAH,CAAaJ,QAAb,EAAuBG,MAAvB,EAA+B,UAASP,GAAT,EAAcS,IAAd,EAAoB;AAC/C,wBAAIT,GAAJ,EAAQ;AACJK,iCAAS,EAAC,SAASL,GAAV,EAAT;AACA;AACJ;AACAK,6BAAS,IAAT,EAAe,EAAC,QAAQb,IAAT,EAAf;AAEH,iBAPD;AAQH,aAVD,MAUO;AACH,sBAAM,IAAIkB,KAAJ,CAAU,wBAAV,CAAN;AACH;AACJ,SAdD,CAcE,OAAOV,GAAP,EAAY;AACVC,oBAAQC,KAAR,CAAc,4BAA4BE,QAA1C,EAAoDJ,GAApD;AACAK,qBAAS,EAAC,SAASL,GAAV,EAAT;AACH;AACJ,KAhCY;AAiCbW,gBAAY,oBAAUP,QAAV,EAAoBC,QAApB,EAA8B;AACtC,YAAI;AACAnB,eAAG0B,QAAH,CAAYR,QAAZ,EAAsB,MAAtB,EAA8B,UAASJ,GAAT,EAAcS,IAAd,EAAmB;AAC7C,oBAAGT,GAAH,EAAO;AACHK,6BAAS,EAAC,SAASL,GAAV,EAAT;AACA;AACH;AACD,oBAAI;AACA,wBAAIa,SAASnB,KAAKI,KAAL,CAAWW,IAAX,CAAb;AACAJ,6BAAS,IAAT,EAAeQ,MAAf;AACH,iBAHD,CAGE,OAAMC,IAAN,EAAY;AACVb,4BAAQc,GAAR,CAAY,SAAZ,EAAuBD,IAAvB;AACH;AACJ,aAXD;AAYH,SAbD,CAaE,OAAOd,GAAP,EAAY;;AAEVC,oBAAQC,KAAR,CAAc,iCAAiCE,QAA/C,EAAyDJ,GAAzD;AACAK,qBAAS,EAAC,SAASL,GAAV,EAAT;AACH;AACJ;AApDY,CAAjB","file":"fsWrapper.js","sourcesContent":["ï»¿var fs = require(\"fs\");\n\nmodule.exports = {\n    jsonToFileSync: function (fileName, json) {\n        var strJson = JSON.stringify(json, null, 4);\n        fs.writeFileSync(fileName, strJson);\n    },\n    fileToJsonSync: function (fileName) {\n        try {\n            return JSON.parse(fs.readFileSync(fileName));\n        } catch (err) {\n            console.error(\"error parsing JSON file: \" + fileName, err);\n            return {};\n        }\n    },\n    jsonToFile: function (filename, json, callback) {\n        try {\n            if(json !== undefined) {\n                var string = JSON.stringify(json, null, 4);\n                fs.writeFile(filename, string, function(err, data) {\n                    if (err){\n                        callback({\"error\": err });\n                        return;\n                   }\n                    callback(null, {\"data\": json});\n\n                });\n            } else {\n                throw new Error(\"File body is undefined\");\n            }\n        } catch (err) {\n            console.error(\"error writing to file: \" + filename, err);\n            callback({\"error\": err });\n        }\n    },\n    fileToJson: function (filename, callback) {\n        try {\n            fs.readFile(filename, 'utf8', function(err, data){\n                if(err){\n                    callback({\"error\": err });\n                    return;\n                }\n                try {\n                    var parsed = JSON.parse(data);\n                    callback(null, parsed);\n                } catch(err2) {\n                    console.log('in data', err2);\n                }\n            });\n        } catch (err) {\n\n            console.error(\"error converting from file: \" + filename, err);\n            callback({\"error\": err });\n        }\n    }\n};\n"]}